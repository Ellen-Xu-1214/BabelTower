{"ast":null,"code":"var _jsxFileName = \"/Users/junlinghu/Desktop/Fall 2019/Software Engineering/Shards-Dashboard-Lite-React-1.0.0/Source Files/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; ////////\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar compression = require('compression');\n\nvar express = require('express');\n\nvar filemanagerMiddleware = require('@opuscapita/filemanager-server').middleware;\n\nvar logger = require('@opuscapita/filemanager-server').logger;\n\nvar env = require('./.env');\n\nvar config = {\n  fsRoot: path.resolve(__dirname, './demo-files'),\n  rootName: 'Customization area'\n};\nvar app = express();\nvar host = process.env.HOST || 'localhost';\nvar port = process.env.PORT || '3020';\nfs.writeFileSync(path.resolve(__dirname, './static/env.js'), 'window.env = ' + JSON.stringify(env) + ';');\napp.use(compression());\napp.use(function (req, res, next) {\n  res.header('Access-Control-Allow-Origin', '*');\n  next();\n});\nvar baseUrl = process.env.BASE_URL || '/';\napp.use(baseUrl, filemanagerMiddleware(config));\napp.use(baseUrl, express.static(path.resolve(__dirname, './static')));\napp.listen(port, host, function (err) {\n  if (err) {\n    logger.error(err);\n  }\n\n  logger.info(\"Server listening at http://\".concat(host, \":\").concat(port));\n});\nprocess.on('exit', function () {\n  logger.warn('Server has been stopped');\n}); ////////\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}), document.getElementById('root'));\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/junlinghu/Desktop/Fall 2019/Software Engineering/Shards-Dashboard-Lite-React-1.0.0/Source Files/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","fs","require","path","compression","express","filemanagerMiddleware","middleware","logger","env","config","fsRoot","resolve","__dirname","rootName","app","host","process","HOST","port","PORT","writeFileSync","JSON","stringify","use","req","res","next","header","baseUrl","BASE_URL","static","listen","err","error","info","on","warn","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAEA;;AACA,IAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAMG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMI,qBAAqB,GAAGJ,OAAO,CAAC,gCAAD,CAAP,CAA0CK,UAAxE;;AACA,IAAMC,MAAM,GAAGN,OAAO,CAAC,gCAAD,CAAP,CAA0CM,MAAzD;;AACA,IAAMC,GAAG,GAAGP,OAAO,CAAC,QAAD,CAAnB;;AAEA,IAAMQ,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAER,IAAI,CAACS,OAAL,CAAaC,SAAb,EAAwB,cAAxB,CADK;AAEbC,EAAAA,QAAQ,EAAE;AAFG,CAAf;AAKA,IAAMC,GAAG,GAAGV,OAAO,EAAnB;AACA,IAAMW,IAAI,GAAGC,OAAO,CAACR,GAAR,CAAYS,IAAZ,IAAoB,WAAjC;AACA,IAAMC,IAAI,GAAGF,OAAO,CAACR,GAAR,CAAYW,IAAZ,IAAoB,MAAjC;AAEAnB,EAAE,CAACoB,aAAH,CACElB,IAAI,CAACS,OAAL,CAAaC,SAAb,EAAwB,iBAAxB,CADF,EAEE,kBAAkBS,IAAI,CAACC,SAAL,CAAed,GAAf,CAAlB,GAAwC,GAF1C;AAKAM,GAAG,CAACS,GAAJ,CAAQpB,WAAW,EAAnB;AACAW,GAAG,CAACS,GAAJ,CAAQ,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/BD,EAAAA,GAAG,CAACE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAD,EAAAA,IAAI;AACL,CAHD;AAKA,IAAME,OAAO,GAAGZ,OAAO,CAACR,GAAR,CAAYqB,QAAZ,IAAwB,GAAxC;AAEAf,GAAG,CAACS,GAAJ,CAAQK,OAAR,EAAiBvB,qBAAqB,CAACI,MAAD,CAAtC;AAEAK,GAAG,CAACS,GAAJ,CAAQK,OAAR,EAAiBxB,OAAO,CAAC0B,MAAR,CAAe5B,IAAI,CAACS,OAAL,CAAaC,SAAb,EAAwB,UAAxB,CAAf,CAAjB;AACAE,GAAG,CAACiB,MAAJ,CAAWb,IAAX,EAAiBH,IAAjB,EAAuB,UAASiB,GAAT,EAAc;AACnC,MAAIA,GAAJ,EAAS;AACPzB,IAAAA,MAAM,CAAC0B,KAAP,CAAaD,GAAb;AACD;;AAEDzB,EAAAA,MAAM,CAAC2B,IAAP,sCAA0CnB,IAA1C,cAAkDG,IAAlD;AACD,CAND;AAQAF,OAAO,CAACmB,EAAR,CAAW,MAAX,EAAmB,YAAW;AAC5B5B,EAAAA,MAAM,CAAC6B,IAAP,CAAY,yBAAZ;AACD,CAFD,E,CAGA;;AAGAvC,QAAQ,CAACwC,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AAEAxC,aAAa,CAACyC,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n////////\nconst fs = require('fs');\nconst path = require('path');\nconst compression = require('compression');\nconst express = require('express');\nconst filemanagerMiddleware = require('@opuscapita/filemanager-server').middleware;\nconst logger = require('@opuscapita/filemanager-server').logger;\nconst env = require('./.env');\n\nconst config = {\n  fsRoot: path.resolve(__dirname, './demo-files'),\n  rootName: 'Customization area'\n};\n\nconst app = express();\nconst host = process.env.HOST || 'localhost';\nconst port = process.env.PORT || '3020';\n\nfs.writeFileSync(\n  path.resolve(__dirname, './static/env.js'),\n  'window.env = ' + JSON.stringify(env) + ';'\n);\n\napp.use(compression());\napp.use(function(req, res, next) {\n  res.header('Access-Control-Allow-Origin', '*');\n  next();\n});\n\nconst baseUrl = process.env.BASE_URL || '/';\n\napp.use(baseUrl, filemanagerMiddleware(config));\n\napp.use(baseUrl, express.static(path.resolve(__dirname, './static')));\napp.listen(port, host, function(err) {\n  if (err) {\n    logger.error(err);\n  }\n\n  logger.info(`Server listening at http://${host}:${port}`);\n});\n\nprocess.on('exit', function() {\n  logger.warn('Server has been stopped');\n});\n////////\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}